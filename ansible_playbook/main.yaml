---

- hosts: "tag_Groups_'{{ lookup('ansible.builtin.env', 'ENVIRONMENT') }}'WebServers"                                                 #"{{ env_webserver_group }}"
  become: true
  vars:
    env_webserver1: tag_Name_'{{ lookup('ansible.builtin.env', 'ENVIRONMENT') }}'WebServer1
  pre_tasks:
    - name: Update and upgrade packages
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400   #one day
  
  tasks:
    - name: Install required tools 
      tags: docker,curl,ca-certificates
      apt:
        name:
           - curl
           - ca-certificates
           - unzip 
           - mysql-client
        state: latest
        update_cache: yes

    - name: Gather package facts
      package_facts:
        manager: apt

    - name: Install Docker
      tags: docker
      shell: |
          sudo apt-get -y update
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get -y update
          sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      when: >
         "docker-ce" not in ansible_facts.packages or
         "docker-ce-cli" not in ansible_facts.packages or
         "containerd.io" not in ansible_facts.packages or
         "docker-buildx-plugin" not in ansible_facts.packages or
         "docker-compose-plugin" not in ansible_facts.packages

    - name: Check if AWS CLI is installed
      command: which aws
      register: aws_cli_check
      ignore_errors: yes

    - name: Download aws cli zip file
      shell: |
        curl -o /tmp/awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
      args:
        executable: /bin/bash
      when: aws_cli_check.rc != 0
      
    - name: Unzip aws cli
      shell: |
          if [ ! -d "/tmp/aws" ]; then
            unzip /tmp/awscliv2.zip -d /tmp/
          fi
      args:
        executable: /bin/bash
      when: aws_cli_check.rc != 0

    - name: Install aws cli
      shell: |
        if [ -d "/usr/local/aws-cli/v2/current" ]; then
          /tmp/aws/install --update
        else
          /tmp/aws/install
        fi
      args:
        executable: /bin/bash
      when: aws_cli_check.rc != 0

    - name: Aws ecr login
      tags: aws,ecr
      shell: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin {{ aws_account_id }}.dkr.ecr.us-east-1.amazonaws.com

    - name: Create environment file in all nodes
      tags: environment,db
      copy:
         dest: /etc/productreview_app.env
         content: |
           MYSQL_HOST={{ rds_endpoint }}
           MYSQL_USER={{ dbusername }}
           MYSQL_PASSWORD={{ dbpassword }}
           MYSQL_DATABASE=product_reviews
      
    - name: create rds sql database and required table from first webserver
      tags: sql,db,rds
      command: |
         mysql -h{{ rds_endpoint }} -u{{ dbusername }} -p{{ dbpassword }} -e "CREATE DATABASE IF NOT EXISTS product_reviews; USE product_reviews; CREATE TABLE IF NOT EXISTS reviews (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), product_name VARCHAR(255), review TEXT);"
      run_once: true

    - name: Check if Swarm is already initialized
      shell: docker info --format '{{ "{{ .Swarm.LocalNodeState }}" }}'
      register: swarm_status
      changed_when: false
      
    - name: Initialize the Docker Swarm in mgr node if not already initialized
      command: docker swarm init
      when: 
          - swarm_status.stdout == "inactive"
          - inventory_hostname in groups[env_webserver1]

    - name: Get Join Token for Workers
      shell: docker swarm join-token -q worker
      register: worker_join_token
      when: inventory_hostname in groups[env_webserver1]

    - name: Set fact for worker join token
      set_fact:
        worker_token: "{{ worker_join_token.stdout }}"
      when: inventory_hostname in groups[env_webserver1]

    - name: worker token sets as fact to all nodes
      set_fact:
        worker_token:  "{{ hostvars[groups[env_webserver1][0]].worker_token }}"
 
    - name: Check Docker Swarm status
      shell: docker info --format '{{ "{{ .Swarm.LocalNodeState }}" }}'
      register: swarm_status
      changed_when: false
      when: inventory_hostname not in groups[env_webserver1]

    - name: Join the Swarm as Worker if not already joined
      command: docker swarm join --token "{{ worker_token }}" {{ hostvars[groups[env_webserver1][0]].ansible_facts.default_ipv4.address }}:2377
      when: 
         - inventory_hostname not in groups[env_webserver1]
         - swarm_status.stdout == "inactive"
 
    

    