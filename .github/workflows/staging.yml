name: "Unit test and deploy to dev servers"

on:
    push:
        branches:
            - staging

env:
  ENVIRONMENT: staging
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
jobs:
    Tests:
        name: "Unittest_of_app_with_DB"
        runs-on: ubuntu-latest

        env:
            #These credentials are for test in runner
            MYSQL_HOST: 127.0.0.1
            MYSQL_USER: root
            MYSQL_PASSWORD: root
            MYSQL_DATABASE: test_db
            #############################            
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Create Test DB and table
              run: |
                  sudo service mysql start
                  mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE $MYSQL_DATABASE;" 
                  mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -e "USE $MYSQL_DATABASE; CREATE TABLE reviews (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(255),product_name VARCHAR(255),review TEXT);"

            - name: venv activate and install dependencies
              run: |
                python3 -m venv .venv
                source .venv/bin/activate
                python3 -m pip install --upgrade pip
                pip3 install -r requirements.txt
              working-directory: ./flask_app_code

            - name: Run tests
              run: |
                source .venv/bin/activate
                pytest
                deactivate
              working-directory: ./flask_app_code


    Build_and_Push_Docker_image:
       name: "Build_and_Push_Docker_image"
       runs-on: ubuntu-latest
       needs: Tests
       steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
        - name: Login to Amazon ECR Private
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
         
        - name: Build and push Docker images for Productreview_app to ECR
          run: |
              chmod +x docker_build_push.sh
              ./docker_build_push.sh
          working-directory: ./flask_app_code
          

    Server-RDS_DB-Monitoring_configs:
        name: "Ensures basic server configs,RDS mysql database,monitoring configs"
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Install Ansible,boto3 and store ssh key in runner
            run: |
              pip3 install ansible boto3
              mkdir -p /home/runner/.ssh/
              echo -e "${{ secrets.ANSIBLE_SSH_KEY }}" > /home/runner/.ssh/flask_ec2.pem
              chmod 600 ~/.ssh/flask_ec2.pem

          - name: Fetch RDS endpoint from AWS
            run: |
              rds_endpoint=$(aws rds --region us-east-1 describe-db-instances \
              --db-instance-identifier ${ENVIRONMENT}productreviewdb \
              --query 'DBInstances[*].Endpoint.Address' --output text) 
              echo "RDS_ENDPOINT=${rds_endpoint}" >> $GITHUB_ENV

          - name: Configure mysql rds db,install docker,create and copy required directories and files using ansible
            env:
              RDS_ENDPOINT: ${{ env.RDS_ENDPOINT }}
            run: |
              ansible-playbook -i ./inventory/hosts.aws_ec2.yaml \
              -u ${{ secrets.WEBSERVER_USER }} --private-key=/home/runner/.ssh/flask_ec2.pem main.yaml \
              --extra-vars "dbusername=${{ secrets.DBUSERNAME }} dbpassword=${{ secrets.DBPASSWORD }}"
            working-directory: ./ansible_playbook

    Deploy_New_Version:
         name: "Deploy new version (App_stack and Monitoring_stack)"
         runs-on: ubuntu-latest
         needs: 
          - Build_and_Push_Docker_image
          - Server-RDS_DB-Monitoring_configs
         steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Set Git commit id as Product review version env variable
            id: set_version
            run: echo "PRODUCT_REVIEW_VERSION=$(git log -1 --pretty=%h)" >> $GITHUB_ENV

          - name: Fetch Docker swarm leader ip and set as env variable
            run: |
                swarm_leader_ip=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=${ENVIRONMENT}WebServer1" \
                --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
                echo "SWARM_LEADER_IP=${swarm_leader_ip}" >> $GITHUB_ENV
          
          - name: Copy appstack compose file via ssh 
            env:
              SWARM_LEADER_IP: ${{ env.SWARM_LEADER_IP }}
            uses: appleboy/scp-action@v0.1.7
            with:
             host: ${{ env.SWARM_LEADER_IP }}
             username: ${{ secrets.WEBSERVER_USER }}
             key: ${{ secrets.ANSIBLE_SSH_KEY }}
             source: "app_compose_files/docker-compose-${{ env.ENVIRONMENT }}.yaml,app_compose_files/app_deploy.sh,monitoring_files/docker-compose.yaml,monitoring_files/monitoring_deploy.sh,monitoring_files/prometheus/*,nginx/*"
             target: /home/ubuntu/

          - name: Deploy docker app_stack 
            env:
              SWARM_LEADER_IP: ${{ env.SWARM_LEADER_IP }}
              PRODUCT_REVIEW_VERSION: ${{ env.PRODUCT_REVIEW_VERSION }}
            uses: appleboy/ssh-action@master
            with:
               host: ${{ env.SWARM_LEADER_IP }}
               username: ${{ secrets.WEBSERVER_USER }}
               key: ${{ secrets.ANSIBLE_SSH_KEY }}
               script: |
                  chmod +x app_compose_files/app_deploy.sh
                  AWS_ACCOUNT_ID="${{ env.AWS_ACCOUNT_ID }}" \
                  ENVIRONMENT="${{ env.ENVIRONMENT }}" \
                  PRODUCT_REVIEW_VERSION="${{ env.PRODUCT_REVIEW_VERSION }}" \
                  ./app_compose_files/app_deploy.sh

                     
          - name: Deploy docker monitoring_stack 
            env:
              SWARM_LEADER_IP: ${{ env.SWARM_LEADER_IP }}
            uses: appleboy/ssh-action@master
            with:
              host: ${{ env.SWARM_LEADER_IP }}
              username: ${{ secrets.WEBSERVER_USER }}
              key: ${{ secrets.ANSIBLE_SSH_KEY }}
              script: |
                 chmod +x monitoring_files/monitoring_deploy.sh
                 ./monitoring_files/monitoring_deploy.sh
         