name: "Unit test and deploy to dev server"

on:
    push:
        branches:
            - dev
            - feature

env:
  PRODUCT_REVIEW_VERSION: "1.0"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DB_INSTANCE_IDENTIFIER: devproductreviewdb
  ENV_WEBSERVER_GROUP: tag_Name_devWebServer*
  MONITORING_SERVER_GROUP: tag_Name_MonitoringServer*
  ENV_WEBSERVER1: tag_Name_devWebServer1
  ENV_WEBSERVER1_TAG: devWebServer1

jobs:
    # Tests:
    #     name: "Unittest_of_app_with_DB"
    #     runs-on: ubuntu-latest

    #     env:
    #         #These credentials are for test in runner
    #         MYSQL_HOST: 127.0.0.1
    #         MYSQL_USER: root
    #         MYSQL_PASSWORD: root
    #         MYSQL_DATABASE: test_db
    #         #############################            
    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v2

    #         - name: Start MySql 
    #           run: |
    #             sudo service mysql start

    #         - name: Create DB and table
    #           run: |
    #               mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE $MYSQL_DATABASE;" 
    #               mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -e "USE $MYSQL_DATABASE; CREATE TABLE reviews (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(255),product_name VARCHAR(255),review TEXT);"

    #         - name: Setup Python
    #           uses: actions/setup-python@v5
    #           with:
    #               python-version: '3.8'
  
    #         - name: venv activate and install dependencies
    #           run: |
    #             python3 -m venv .venv
    #             source .venv/bin/activate
    #             python3 -m pip install --upgrade pip
    #             pip3 install -r requirements.txt
    #           working-directory: ./flask_app_code

    #         - name: Run tests
    #           run: |
    #             source .venv/bin/activate
    #             pytest
    #             deactivate
    #           working-directory: ./flask_app_code


    # Build_and_Push_Docker_image:
    #    name: "Build_and_Push_Docker_image"
    #    runs-on: ubuntu-latest
    #    needs: Tests
    #    steps:
    #     - name: Checkout code
    #       uses: actions/checkout@v2

    #     - name: Configure AWS credentials for ECR
    #       run: |
    #         aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    #       #aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && aws configure set aws_default_region $AWS_DEFAULT_REGION

    #     - name: Build and push Docker images for Productreview_app to ECR
    #       run: |
    #         docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/product_review:$PRODUCT_REVIEW_VERSION .
    #         docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/product_review:$PRODUCT_REVIEW_VERSION
    #       working-directory: ./flask_app_code

    Server-RDS_DB-Monitoring_configs:
        name: "Ensures basic server configs,RDS mysql database,monitoring configs"
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          # - name: Configure AWS credentials
          #   run: |
          #     aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && aws configure set aws_default_region $AWS_DEFAULT_REGION

          - name: Install Ansible,boto3 and store ssh key in runner
            run: |
              pip3 install ansible boto3
              mkdir -p /home/runner/.ssh/
              echo -e "${{ secrets.ANSIBLE_SSH_KEY }}" > /home/runner/.ssh/flask_ec2.pem
              chmod 600 ~/.ssh/flask_ec2.pem

          - name: Fetch RDS endpoint from AWS
            run: |
              rds_endpoint=$(aws rds --region us-east-1 describe-db-instances --db-instance-identifier $DB_INSTANCE_IDENTIFIER --query 'DBInstances[*].Endpoint.Address' --output text) 
              echo "RDS_ENDPOINT=${rds_endpoint}" >> $GITHUB_ENV

          - name: Configure mysql rds db and docker commands in webservers
            env:
              RDS_ENDPOINT: ${{ env.RDS_ENDPOINT }}
            run: |
              ansible-playbook -i ./inventory/hosts.aws_ec2.yaml -u ${{ secrets.WEBSERVER_USER }} --private-key=/home/runner/.ssh/flask_ec2.pem new.yml --extra-vars "env_webserver_group=$ENV_WEBSERVER_GROUP env_webserver1=$ENV_WEBSERVER1 monitoring_server_group=$MONITORING_SERVER_GROUP rds_endpoint=$RDS_ENDPOINT dbusername=${{ secrets.DBUSERNAME }} dbpassword=${{ secrets.DBPASSWORD }} aws_account_id=$AWS_ACCOUNT_ID"
            working-directory: ./ansible_playbook

    # Deploy_New_Version:
    #      name: "Copy new Docker compose file and deploy new version"
    #      runs-on: ubuntu-latest
    #      needs: 
    #       - Build_and_Push_Docker_image
    #       - Server-RDS_DB-Monitoring_configs
    #      steps:
    #       - name: Fetch Docker swarm leader ip and set as env variable
    #         run: |
    #           export SWARM_LEADER_IP=$(ansible localhost -m ec2_instance_info \
    #           -a "aws_access_key=$AWS_ACCESS_KEY_ID aws_secret_key=$SECRET_ACCESS_KEY region=$AWS_DEFAULT_REGION filters='tag:Name=$ENV_WEBSERVER1'" \
    #           --become-user=root | jq -r '.instances[0].public_ip_address')

    #       - name: Deploy Docker Stack
    #         uses: tristiisch/docker-stack-deployment@v2
    #         with:
    #           remote_docker_host: $SWARM_LEADER_IP
    #           remote_docker_username: ${{ secrets.WEBSERVER_USER }}
    #           ssh_private_key: ${{ secrets.ANSIBLE_SSH_KEY }}
    #           ssh_public_key: ${{ secrets.PUBLIC_KEY }}
    #           deployment_mode: docker-swarm
    #           copy_stack_file: true
    #           deploy_path: /home/ubuntu
    #           stack_file_path: ./docker-compose.yaml
    #           keep_files: 5
    #           docker_remove_orphans: true
    #           stack_name: mystack
    #           args: "--detach=false"

            
        
            
            
